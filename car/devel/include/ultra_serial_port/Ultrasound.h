// Generated by gencpp from file ultra_serial_port/Ultrasound.msg
// DO NOT EDIT!


#ifndef ULTRA_SERIAL_PORT_MESSAGE_ULTRASOUND_H
#define ULTRA_SERIAL_PORT_MESSAGE_ULTRASOUND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ultra_serial_port
{
template <class ContainerAllocator>
struct Ultrasound_
{
  typedef Ultrasound_<ContainerAllocator> Type;

  Ultrasound_()
    : dis(0)
    , dis2(0)  {
    }
  Ultrasound_(const ContainerAllocator& _alloc)
    : dis(0)
    , dis2(0)  {
  (void)_alloc;
    }



   typedef int16_t _dis_type;
  _dis_type dis;

   typedef int16_t _dis2_type;
  _dis2_type dis2;





  typedef boost::shared_ptr< ::ultra_serial_port::Ultrasound_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ultra_serial_port::Ultrasound_<ContainerAllocator> const> ConstPtr;

}; // struct Ultrasound_

typedef ::ultra_serial_port::Ultrasound_<std::allocator<void> > Ultrasound;

typedef boost::shared_ptr< ::ultra_serial_port::Ultrasound > UltrasoundPtr;
typedef boost::shared_ptr< ::ultra_serial_port::Ultrasound const> UltrasoundConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ultra_serial_port::Ultrasound_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ultra_serial_port::Ultrasound_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ultra_serial_port::Ultrasound_<ContainerAllocator1> & lhs, const ::ultra_serial_port::Ultrasound_<ContainerAllocator2> & rhs)
{
  return lhs.dis == rhs.dis &&
    lhs.dis2 == rhs.dis2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ultra_serial_port::Ultrasound_<ContainerAllocator1> & lhs, const ::ultra_serial_port::Ultrasound_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ultra_serial_port

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ultra_serial_port::Ultrasound_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ultra_serial_port::Ultrasound_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ultra_serial_port::Ultrasound_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ultra_serial_port::Ultrasound_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ultra_serial_port::Ultrasound_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ultra_serial_port::Ultrasound_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ultra_serial_port::Ultrasound_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fbe7339e94fec895366dda899719a997";
  }

  static const char* value(const ::ultra_serial_port::Ultrasound_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfbe7339e94fec895ULL;
  static const uint64_t static_value2 = 0x366dda899719a997ULL;
};

template<class ContainerAllocator>
struct DataType< ::ultra_serial_port::Ultrasound_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ultra_serial_port/Ultrasound";
  }

  static const char* value(const ::ultra_serial_port::Ultrasound_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ultra_serial_port::Ultrasound_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 dis\n"
"int16 dis2\n"
;
  }

  static const char* value(const ::ultra_serial_port::Ultrasound_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ultra_serial_port::Ultrasound_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.dis);
      stream.next(m.dis2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Ultrasound_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ultra_serial_port::Ultrasound_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ultra_serial_port::Ultrasound_<ContainerAllocator>& v)
  {
    s << indent << "dis: ";
    Printer<int16_t>::stream(s, indent + "  ", v.dis);
    s << indent << "dis2: ";
    Printer<int16_t>::stream(s, indent + "  ", v.dis2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ULTRA_SERIAL_PORT_MESSAGE_ULTRASOUND_H
